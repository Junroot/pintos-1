do_munmap(f);
				e = list_remove(&f->elem);
				free(f);
			}
	}
	else
	{
		for (e = list_begin(&thread_current()->mmap_list); e != list_end(&thread_current()->mmap_list); e = list_next(e))
		{
			f = list_entry (e, struct mmap_file, elem);
			if (f->mapid == mapid)
			{
				do_munmap(f);
				list_remove(&f->elem);
				free(f);
				break;
			}
		}
	}
}
void do_munmap(struct mmap_file *mmap_file)
{
	ASSERT(mmap_file != NULL);
	struct thread* cur = thread_current();

	struct list_elem *e;
	for (e = list_begin(&mmap_file->vme_list); e != list_end(&mmap_file->vme_list);)
	{
		struct vm_entry *vme = list_entry(e, struct vm_entry, mmap_elem);
		if(vme->is_loaded)
		{
			if (pagedir_is_dirty(cur->pagedir, vme->vaddr))
			{
				lock_acquire(&filesys_lock);
				file_write_at(vme->file,vme->vaddr,vme->read_bytes,vme->offset);
				lock_release(&filesys_lock);
			}
			free_page(pagedir_get_page(cur->pagedir, vme->vaddr));
			pagedir_clear_page(cur->pagedir, vme->vaddr);
		}
		e = list_remove(e);
		delete_vme (&cur->vm, vme);
		free(vme);
	}
}

void check_valid_buffer (void *buffer, unsigned size, void *esp, bool to_write)
{
	unsigned i;
	char *temp = (char *)buffer;
	struct vm_entry* vme;

	for (i = 0; i < size; i++)
	{
		vme = check_address(temp,esp);
		if (vme != NULL && to_write == true)
		{
			if (vme->writable == false) exit(-1);
		}
		temp++;
	}
}

void check_valid_string (const void *str, void *esp)
{
	char* ch = (char*)str;
	while (*ch != '\0')
	{
		check_address((void*)ch,esp);
		ch++;
	}
}

//Check addr is user area
struct vm_entry * check_address (void *addr, void* esp /*Unused*/)
{
	if(addr<0x8048000 || addr>=0xc0000000)
	{
		exit(-1);
	}
	return find_vme(addr);
}

void 
get_argument (void *esp, int *arg, int count)
{
	int i;
	int *sp = esp;
	for (i=0; i<count; ++i)
	{
		check_address(sp + i + 1, esp);
		arg[i] = *(sp + i + 1);
	}
}

void
syscall_init (void) 
{
  lock_init(&filesys_lock);
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  int *esp = f->esp;
  int arg[4];
  check_address(esp,esp);// esp check
  switch(*esp)
  {
	case SYS_HALT:
		halt();
		break;
    case SYS_EXIT:
		get_argument(esp,arg,1);// If argument is pointer, check address
		exit((int)arg[0]);
		break;
	case SYS_CREATE:
		get_argument(esp,arg,2);
		check_valid_string((void*)arg[0], esp);
		f->eax = create((const char *)arg[0],(unsigned)arg[1]);
		break;
	case SYS_REMOVE:
		get_argument(esp,arg,1);
		check_valid_string((void*)arg[0], esp);
		f->eax = remove((const char *)arg[0]);
		break;
    case SYS_EXEC:
		get_argument(esp,arg,1);
		check_valid_string((void*)arg[0], esp);
		f->eax = exec((const char *)arg[0]);
		break;
	case SYS_WAIT:
		get_argument(esp,arg,1);
		f->eax = wait((tid_t)arg[0]);
		break;
    case SYS_OPEN:
		get_argument(esp,arg,1);
		check_valid_string((void*)arg[0],esp);
		f->eax = open((const char *)arg[0]);
		break;
	case SYS_FILESIZE:
		get_argument(esp,arg,1);
		f->eax = filesize((int)arg[0]);
		break;
	case SYS_READ:
		get_argument(esp,arg,3);
		check_valid_buffer((void*)arg[1], (unsigned)arg[2], esp, true);
		f->eax = read((int)arg[0],(void *)arg[1],(unsigned)arg[2]);
		break;
	case SYS_WRITE:
		get_argument(esp,arg,3);
		check_valid_buffer((void*)arg[1], (unsigned)arg[2], esp, false);
		f->eax = write((int)arg[0],(void *)arg[1],(unsigned)arg[2]);
		break;
	case SYS_SEEK:
		get_argument(esp,arg,2);
		seek((int)arg[0],(unsigned)arg[1]);
		break;
	case SYS_TELL:
		get_argument(esp,arg,1);
		f->eax = tell((int)arg[0]);
		break;
	case SYS_CLOSE:
		get_argument(esp,arg,1);
		close((int)arg[0]);
		break;
	case SYS_MMAP:
		get_argument(esp,arg,2);
		f->eax = mmap(arg[0], (void *)arg[1]);
		break;
	case SYS_MUNMAP:
		get_argument(esp,arg,1);
		munmap(arg[0]);
		break;
  }
}
